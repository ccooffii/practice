{"mappings":"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","sources":["dom.js"],"sourcesContent":["window.dom = {\r\n    //create labels\r\n    create(string) {\r\n        const container = document.createElement(\"template\"); //template label can contain all types of labels\r\n        container.innerHTML = string.trim();      //trim the space\r\n        return container.content.firstChild;\r\n    },\r\n    //append a sibling after a node\r\n    after(node1, node2) {\r\n        node1.parentNode.insertBefore(node2, node1.nextSibling); //find the parentNode then call insertBefore\r\n    },\r\n    //append a sibling before a node\r\n    before(node1, node2) {\r\n        node1.parentNode.insertBefore(node2, node1)\r\n    },\r\n    //append a parent node\r\n    wrap(node, parent) {\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)\r\n    },\r\n    //remove a node, and return it\r\n    remove(node){\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n    //remove all childNode, and return them\r\n    empty(node){\r\n        const  list = []\r\n        let temp = node.firstChild\r\n        while(temp){\r\n            list.push(dom.remove(node.firstChild))\r\n            temp = node.firstChild\r\n        }\r\n        return list\r\n    },\r\n    //set or get attribution\r\n    attr(node, attrName, attrValue){ //reload\r\n        if(arguments.length === 3){//three parameters means set\r\n            //eg dom.attr(div,'name','Jeremy') \r\n            node.setAttribute(attrName, attrValue)\r\n        }else if(arguments.length === 2){//two parameters means get\r\n            //eg dom.attr(div,'name')\r\n            return node.getAttribute(attrName) \r\n        }\r\n    },\r\n    //set or get text content\r\n    text(node, string){\r\n        if (arguments.length === 2){\r\n            //eg: dom.text(div,'Hello')\r\n            if('innerText' in node){\r\n                node.innerText = string\r\n                }else{\r\n                node.textContent = string\r\n            }\r\n        }else if(arguments.length === 1){\r\n            //eg: dom.text(div)\r\n            if('innerText' in node){\r\n                return node.innerText\r\n                }else{\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n    //set or get HTML content\r\n    html(node, string){\r\n        if (arguments.length === 2){\r\n            //eg: dom.text(div,'<span> Hello </span>')\r\n            node.innerHTML = string\r\n        }else if(arguments.length === 1){\r\n            //eg: dom.text(div,'<span> Hello </span>')\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    //set or get CSS content\r\n    style(node, name, value){\r\n        if(arguments.length === 3){\r\n            //eg: dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        }else if(arguments.length === 2){\r\n            //eg: dom.style(div,'color')\r\n            return node.style[name]\r\n        }else if(name instanceof Object){\r\n            //eg: dom.style(div,{color:'red'})\r\n            const object = name\r\n            for(let key in object){\r\n                node.style[key] = object[key]\r\n            }\r\n        }\r\n    },\r\n    //add, delete or has class\r\n    class: {\r\n        add(node,className){\r\n            node.classList.add(className)\r\n        },\r\n        delete(node,className){\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className){\r\n            return node.classList.contains(className)\r\n        },\r\n    },\r\n    //add listener\r\n    on(node, eventName, fn){\r\n        //eg: dom.on(test, 'click',fn)\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //remove listener\r\n    off(node, eventName, fn){\r\n        //eg: dom.off(test, 'click',fn)\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //get node by selector\r\n    find(selector, scope){ \r\n        //eg: dom.find('#test') or dom.find('.red',test2)\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    //get parent node\r\n    parent(node){\r\n        return node.parentNode\r\n    },\r\n    //get children nodes\r\n    children(node){\r\n        return node.children\r\n    },\r\n    //get sibling nodes\r\n    sibling(node){\r\n        return Array.from(node.parentNode.children).filter(n=>n!==node)\r\n    },\r\n    //get next sibling node\r\n    next(node){\r\n        let temp = node.nextSibling\r\n        while(temp && temp.nodeType === 3){\r\n            temp = temp.nextSibling\r\n        }\r\n        return temp;\r\n    },\r\n    //get previous sibling node\r\n    previous(node){\r\n        let temp = node.previousSibling\r\n        while(temp && temp.nodeType === 3){\r\n            temp = temp.previousSibling\r\n        }\r\n        return temp;\r\n    },\r\n    //travel nodes\r\n    each(nodeList, fn){\r\n        for(let i=0;i < nodeList.length;i++){\r\n            fn.call(null,nodeList[i])\r\n        }\r\n    },\r\n    //get node index\r\n    index(node){\r\n        const list = dom.children(node.parent)\r\n        let index\r\n        for(index = 0; index < list.length; index++){\r\n            if(list[index] === node){\r\n                break\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n};"],"names":[],"version":3,"file":"index.8067b1f7.js.map","sourceRoot":"/__parcel_source_root/"}